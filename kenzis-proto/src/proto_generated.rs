// automatically generated by the FlatBuffers compiler, do not modify



use std::mem;
use std::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::EndianScalar;

#[allow(unused_imports, dead_code)]
pub mod kenzis_proto {

  use std::mem;
  use std::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::EndianScalar;

pub enum ClientInfoOffset {}
#[derive(Copy, Clone, Debug, PartialEq)]

pub struct ClientInfo<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for ClientInfo<'a> {
    type Inner = ClientInfo<'a>;
    #[inline]
    fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self {
            _tab: flatbuffers::Table { buf: buf, loc: loc },
        }
    }
}

impl<'a> ClientInfo<'a> {
    #[inline]
    pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        ClientInfo {
            _tab: table,
        }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args ClientInfoArgs) -> flatbuffers::WIPOffset<ClientInfo<'bldr>> {
      let mut builder = ClientInfoBuilder::new(_fbb);
      builder.add_id(args.id);
      builder.finish()
    }

    pub const VT_ID: flatbuffers::VOffsetT = 4;

  #[inline]
  pub fn id(&self) -> i32 {
    self._tab.get::<i32>(ClientInfo::VT_ID, Some(0)).unwrap()
  }
}

pub struct ClientInfoArgs {
    pub id: i32,
}
impl<'a> Default for ClientInfoArgs {
    #[inline]
    fn default() -> Self {
        ClientInfoArgs {
            id: 0,
        }
    }
}
pub struct ClientInfoBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> ClientInfoBuilder<'a, 'b> {
  #[inline]
  pub fn add_id(&mut self, id: i32) {
    self.fbb_.push_slot::<i32>(ClientInfo::VT_ID, id, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> ClientInfoBuilder<'a, 'b> {
    let start = _fbb.start_table();
    ClientInfoBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<ClientInfo<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

pub enum SessionSettingsOffset {}
#[derive(Copy, Clone, Debug, PartialEq)]

pub struct SessionSettings<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for SessionSettings<'a> {
    type Inner = SessionSettings<'a>;
    #[inline]
    fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self {
            _tab: flatbuffers::Table { buf: buf, loc: loc },
        }
    }
}

impl<'a> SessionSettings<'a> {
    #[inline]
    pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        SessionSettings {
            _tab: table,
        }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args SessionSettingsArgs) -> flatbuffers::WIPOffset<SessionSettings<'bldr>> {
      let mut builder = SessionSettingsBuilder::new(_fbb);
      builder.add_timeout(args.timeout);
      builder.finish()
    }

    pub const VT_TIMEOUT: flatbuffers::VOffsetT = 4;

  #[inline]
  pub fn timeout(&self) -> u32 {
    self._tab.get::<u32>(SessionSettings::VT_TIMEOUT, Some(0)).unwrap()
  }
}

pub struct SessionSettingsArgs {
    pub timeout: u32,
}
impl<'a> Default for SessionSettingsArgs {
    #[inline]
    fn default() -> Self {
        SessionSettingsArgs {
            timeout: 0,
        }
    }
}
pub struct SessionSettingsBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> SessionSettingsBuilder<'a, 'b> {
  #[inline]
  pub fn add_timeout(&mut self, timeout: u32) {
    self.fbb_.push_slot::<u32>(SessionSettings::VT_TIMEOUT, timeout, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> SessionSettingsBuilder<'a, 'b> {
    let start = _fbb.start_table();
    SessionSettingsBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<SessionSettings<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

pub enum ClientProcedureCallOffset {}
#[derive(Copy, Clone, Debug, PartialEq)]

pub struct ClientProcedureCall<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for ClientProcedureCall<'a> {
    type Inner = ClientProcedureCall<'a>;
    #[inline]
    fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self {
            _tab: flatbuffers::Table { buf: buf, loc: loc },
        }
    }
}

impl<'a> ClientProcedureCall<'a> {
    #[inline]
    pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        ClientProcedureCall {
            _tab: table,
        }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args ClientProcedureCallArgs<'args>) -> flatbuffers::WIPOffset<ClientProcedureCall<'bldr>> {
      let mut builder = ClientProcedureCallBuilder::new(_fbb);
      builder.add_call_identifier(args.call_identifier);
      builder.add_deadline(args.deadline);
      if let Some(x) = args.args { builder.add_args(x); }
      if let Some(x) = args.path { builder.add_path(x); }
      builder.finish()
    }

    pub const VT_CALL_IDENTIFIER: flatbuffers::VOffsetT = 4;
    pub const VT_PATH: flatbuffers::VOffsetT = 6;
    pub const VT_ARGS: flatbuffers::VOffsetT = 8;
    pub const VT_DEADLINE: flatbuffers::VOffsetT = 10;

  #[inline]
  pub fn call_identifier(&self) -> u64 {
    self._tab.get::<u64>(ClientProcedureCall::VT_CALL_IDENTIFIER, Some(0)).unwrap()
  }
  #[inline]
  pub fn path(&self) -> Option<&'a [u8]> {
    self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u8>>>(ClientProcedureCall::VT_PATH, None).map(|v| v.safe_slice())
  }
  #[inline]
  pub fn args(&self) -> Option<&'a [u8]> {
    self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u8>>>(ClientProcedureCall::VT_ARGS, None).map(|v| v.safe_slice())
  }
  #[inline]
  pub fn deadline(&self) -> u32 {
    self._tab.get::<u32>(ClientProcedureCall::VT_DEADLINE, Some(0)).unwrap()
  }
}

pub struct ClientProcedureCallArgs<'a> {
    pub call_identifier: u64,
    pub path: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a ,  u8>>>,
    pub args: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a ,  u8>>>,
    pub deadline: u32,
}
impl<'a> Default for ClientProcedureCallArgs<'a> {
    #[inline]
    fn default() -> Self {
        ClientProcedureCallArgs {
            call_identifier: 0,
            path: None,
            args: None,
            deadline: 0,
        }
    }
}
pub struct ClientProcedureCallBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> ClientProcedureCallBuilder<'a, 'b> {
  #[inline]
  pub fn add_call_identifier(&mut self, call_identifier: u64) {
    self.fbb_.push_slot::<u64>(ClientProcedureCall::VT_CALL_IDENTIFIER, call_identifier, 0);
  }
  #[inline]
  pub fn add_path(&mut self, path: flatbuffers::WIPOffset<flatbuffers::Vector<'b , u8>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ClientProcedureCall::VT_PATH, path);
  }
  #[inline]
  pub fn add_args(&mut self, args: flatbuffers::WIPOffset<flatbuffers::Vector<'b , u8>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ClientProcedureCall::VT_ARGS, args);
  }
  #[inline]
  pub fn add_deadline(&mut self, deadline: u32) {
    self.fbb_.push_slot::<u32>(ClientProcedureCall::VT_DEADLINE, deadline, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> ClientProcedureCallBuilder<'a, 'b> {
    let start = _fbb.start_table();
    ClientProcedureCallBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<ClientProcedureCall<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

pub enum ClientInitOffset {}
#[derive(Copy, Clone, Debug, PartialEq)]

pub struct ClientInit<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for ClientInit<'a> {
    type Inner = ClientInit<'a>;
    #[inline]
    fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self {
            _tab: flatbuffers::Table { buf: buf, loc: loc },
        }
    }
}

impl<'a> ClientInit<'a> {
    #[inline]
    pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        ClientInit {
            _tab: table,
        }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args ClientInitArgs<'args>) -> flatbuffers::WIPOffset<ClientInit<'bldr>> {
      let mut builder = ClientInitBuilder::new(_fbb);
      if let Some(x) = args.settings { builder.add_settings(x); }
      if let Some(x) = args.meta { builder.add_meta(x); }
      builder.finish()
    }

    pub const VT_META: flatbuffers::VOffsetT = 4;
    pub const VT_SETTINGS: flatbuffers::VOffsetT = 6;

  #[inline]
  pub fn meta(&self) -> Option<ClientInfo<'a>> {
    self._tab.get::<flatbuffers::ForwardsUOffset<ClientInfo<'a>>>(ClientInit::VT_META, None)
  }
  #[inline]
  pub fn settings(&self) -> Option<SessionSettings<'a>> {
    self._tab.get::<flatbuffers::ForwardsUOffset<SessionSettings<'a>>>(ClientInit::VT_SETTINGS, None)
  }
}

pub struct ClientInitArgs<'a> {
    pub meta: Option<flatbuffers::WIPOffset<ClientInfo<'a >>>,
    pub settings: Option<flatbuffers::WIPOffset<SessionSettings<'a >>>,
}
impl<'a> Default for ClientInitArgs<'a> {
    #[inline]
    fn default() -> Self {
        ClientInitArgs {
            meta: None,
            settings: None,
        }
    }
}
pub struct ClientInitBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> ClientInitBuilder<'a, 'b> {
  #[inline]
  pub fn add_meta(&mut self, meta: flatbuffers::WIPOffset<ClientInfo<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<ClientInfo>>(ClientInit::VT_META, meta);
  }
  #[inline]
  pub fn add_settings(&mut self, settings: flatbuffers::WIPOffset<SessionSettings<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<SessionSettings>>(ClientInit::VT_SETTINGS, settings);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> ClientInitBuilder<'a, 'b> {
    let start = _fbb.start_table();
    ClientInitBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<ClientInit<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

}  // pub mod KenzisProto

