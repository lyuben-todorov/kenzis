// automatically generated by the FlatBuffers compiler, do not modify



use std::mem;
use std::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::EndianScalar;

#[allow(unused_imports, dead_code)]
pub mod kenzis_proto {

  use std::mem;
  use std::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::EndianScalar;

#[allow(non_camel_case_types)]
#[repr(i8)]
#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]
pub enum ServerError {
  SESSION_INVALID = 0,

}

pub const ENUM_MIN_SERVER_ERROR: i8 = 0;
pub const ENUM_MAX_SERVER_ERROR: i8 = 0;

impl<'a> flatbuffers::Follow<'a> for ServerError {
  type Inner = Self;
  #[inline]
  fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    flatbuffers::read_scalar_at::<Self>(buf, loc)
  }
}

impl flatbuffers::EndianScalar for ServerError {
  #[inline]
  fn to_little_endian(self) -> Self {
    let n = i8::to_le(self as i8);
    let p = &n as *const i8 as *const ServerError;
    unsafe { *p }
  }
  #[inline]
  fn from_little_endian(self) -> Self {
    let n = i8::from_le(self as i8);
    let p = &n as *const i8 as *const ServerError;
    unsafe { *p }
  }
}

impl flatbuffers::Push for ServerError {
    type Output = ServerError;
    #[inline]
    fn push(&self, dst: &mut [u8], _rest: &[u8]) {
        flatbuffers::emplace_scalar::<ServerError>(dst, *self);
    }
}

#[allow(non_camel_case_types)]
pub const ENUM_VALUES_SERVER_ERROR:[ServerError; 1] = [
  ServerError::SESSION_INVALID
];

#[allow(non_camel_case_types)]
pub const ENUM_NAMES_SERVER_ERROR:[&'static str; 1] = [
    "SESSION_INVALID"
];

pub fn enum_name_server_error(e: ServerError) -> &'static str {
  let index = e as i8;
  ENUM_NAMES_SERVER_ERROR[index as usize]
}

pub enum ClientInfoOffset {}
#[derive(Copy, Clone, Debug, PartialEq)]

pub struct ClientInfo<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for ClientInfo<'a> {
    type Inner = ClientInfo<'a>;
    #[inline]
    fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self {
            _tab: flatbuffers::Table { buf: buf, loc: loc },
        }
    }
}

impl<'a> ClientInfo<'a> {
    #[inline]
    pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        ClientInfo {
            _tab: table,
        }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args ClientInfoArgs) -> flatbuffers::WIPOffset<ClientInfo<'bldr>> {
      let mut builder = ClientInfoBuilder::new(_fbb);
      builder.add_id(args.id);
      builder.finish()
    }

    pub const VT_ID: flatbuffers::VOffsetT = 4;

  #[inline]
  pub fn id(&self) -> i32 {
    self._tab.get::<i32>(ClientInfo::VT_ID, Some(0)).unwrap()
  }
}

pub struct ClientInfoArgs {
    pub id: i32,
}
impl<'a> Default for ClientInfoArgs {
    #[inline]
    fn default() -> Self {
        ClientInfoArgs {
            id: 0,
        }
    }
}
pub struct ClientInfoBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> ClientInfoBuilder<'a, 'b> {
  #[inline]
  pub fn add_id(&mut self, id: i32) {
    self.fbb_.push_slot::<i32>(ClientInfo::VT_ID, id, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> ClientInfoBuilder<'a, 'b> {
    let start = _fbb.start_table();
    ClientInfoBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<ClientInfo<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

pub enum SessionSettingsOffset {}
#[derive(Copy, Clone, Debug, PartialEq)]

pub struct SessionSettings<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for SessionSettings<'a> {
    type Inner = SessionSettings<'a>;
    #[inline]
    fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self {
            _tab: flatbuffers::Table { buf: buf, loc: loc },
        }
    }
}

impl<'a> SessionSettings<'a> {
    #[inline]
    pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        SessionSettings {
            _tab: table,
        }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args SessionSettingsArgs) -> flatbuffers::WIPOffset<SessionSettings<'bldr>> {
      let mut builder = SessionSettingsBuilder::new(_fbb);
      builder.add_timeout(args.timeout);
      builder.finish()
    }

    pub const VT_TIMEOUT: flatbuffers::VOffsetT = 4;

  #[inline]
  pub fn timeout(&self) -> u32 {
    self._tab.get::<u32>(SessionSettings::VT_TIMEOUT, Some(0)).unwrap()
  }
}

pub struct SessionSettingsArgs {
    pub timeout: u32,
}
impl<'a> Default for SessionSettingsArgs {
    #[inline]
    fn default() -> Self {
        SessionSettingsArgs {
            timeout: 0,
        }
    }
}
pub struct SessionSettingsBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> SessionSettingsBuilder<'a, 'b> {
  #[inline]
  pub fn add_timeout(&mut self, timeout: u32) {
    self.fbb_.push_slot::<u32>(SessionSettings::VT_TIMEOUT, timeout, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> SessionSettingsBuilder<'a, 'b> {
    let start = _fbb.start_table();
    SessionSettingsBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<SessionSettings<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

pub enum ClientProcedureCallOffset {}
#[derive(Copy, Clone, Debug, PartialEq)]

pub struct ClientProcedureCall<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for ClientProcedureCall<'a> {
    type Inner = ClientProcedureCall<'a>;
    #[inline]
    fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self {
            _tab: flatbuffers::Table { buf: buf, loc: loc },
        }
    }
}

impl<'a> ClientProcedureCall<'a> {
    #[inline]
    pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        ClientProcedureCall {
            _tab: table,
        }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args ClientProcedureCallArgs<'args>) -> flatbuffers::WIPOffset<ClientProcedureCall<'bldr>> {
      let mut builder = ClientProcedureCallBuilder::new(_fbb);
      builder.add_call_identifier(args.call_identifier);
      builder.add_deadline(args.deadline);
      if let Some(x) = args.args { builder.add_args(x); }
      if let Some(x) = args.path { builder.add_path(x); }
      builder.finish()
    }

    pub const VT_CALL_IDENTIFIER: flatbuffers::VOffsetT = 4;
    pub const VT_PATH: flatbuffers::VOffsetT = 6;
    pub const VT_ARGS: flatbuffers::VOffsetT = 8;
    pub const VT_DEADLINE: flatbuffers::VOffsetT = 10;

  #[inline]
  pub fn call_identifier(&self) -> u64 {
    self._tab.get::<u64>(ClientProcedureCall::VT_CALL_IDENTIFIER, Some(0)).unwrap()
  }
  #[inline]
  pub fn path(&self) -> Option<&'a [u8]> {
    self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u8>>>(ClientProcedureCall::VT_PATH, None).map(|v| v.safe_slice())
  }
  #[inline]
  pub fn args(&self) -> Option<&'a [u8]> {
    self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u8>>>(ClientProcedureCall::VT_ARGS, None).map(|v| v.safe_slice())
  }
  #[inline]
  pub fn deadline(&self) -> u32 {
    self._tab.get::<u32>(ClientProcedureCall::VT_DEADLINE, Some(0)).unwrap()
  }
}

pub struct ClientProcedureCallArgs<'a> {
    pub call_identifier: u64,
    pub path: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a ,  u8>>>,
    pub args: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a ,  u8>>>,
    pub deadline: u32,
}
impl<'a> Default for ClientProcedureCallArgs<'a> {
    #[inline]
    fn default() -> Self {
        ClientProcedureCallArgs {
            call_identifier: 0,
            path: None,
            args: None,
            deadline: 0,
        }
    }
}
pub struct ClientProcedureCallBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> ClientProcedureCallBuilder<'a, 'b> {
  #[inline]
  pub fn add_call_identifier(&mut self, call_identifier: u64) {
    self.fbb_.push_slot::<u64>(ClientProcedureCall::VT_CALL_IDENTIFIER, call_identifier, 0);
  }
  #[inline]
  pub fn add_path(&mut self, path: flatbuffers::WIPOffset<flatbuffers::Vector<'b , u8>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ClientProcedureCall::VT_PATH, path);
  }
  #[inline]
  pub fn add_args(&mut self, args: flatbuffers::WIPOffset<flatbuffers::Vector<'b , u8>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ClientProcedureCall::VT_ARGS, args);
  }
  #[inline]
  pub fn add_deadline(&mut self, deadline: u32) {
    self.fbb_.push_slot::<u32>(ClientProcedureCall::VT_DEADLINE, deadline, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> ClientProcedureCallBuilder<'a, 'b> {
    let start = _fbb.start_table();
    ClientProcedureCallBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<ClientProcedureCall<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

pub enum ClientInitOffset {}
#[derive(Copy, Clone, Debug, PartialEq)]

pub struct ClientInit<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for ClientInit<'a> {
    type Inner = ClientInit<'a>;
    #[inline]
    fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self {
            _tab: flatbuffers::Table { buf: buf, loc: loc },
        }
    }
}

impl<'a> ClientInit<'a> {
    #[inline]
    pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        ClientInit {
            _tab: table,
        }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args ClientInitArgs<'args>) -> flatbuffers::WIPOffset<ClientInit<'bldr>> {
      let mut builder = ClientInitBuilder::new(_fbb);
      if let Some(x) = args.settings { builder.add_settings(x); }
      if let Some(x) = args.meta { builder.add_meta(x); }
      builder.finish()
    }

    pub const VT_META: flatbuffers::VOffsetT = 4;
    pub const VT_SETTINGS: flatbuffers::VOffsetT = 6;

  #[inline]
  pub fn meta(&self) -> Option<ClientInfo<'a>> {
    self._tab.get::<flatbuffers::ForwardsUOffset<ClientInfo<'a>>>(ClientInit::VT_META, None)
  }
  #[inline]
  pub fn settings(&self) -> Option<SessionSettings<'a>> {
    self._tab.get::<flatbuffers::ForwardsUOffset<SessionSettings<'a>>>(ClientInit::VT_SETTINGS, None)
  }
}

pub struct ClientInitArgs<'a> {
    pub meta: Option<flatbuffers::WIPOffset<ClientInfo<'a >>>,
    pub settings: Option<flatbuffers::WIPOffset<SessionSettings<'a >>>,
}
impl<'a> Default for ClientInitArgs<'a> {
    #[inline]
    fn default() -> Self {
        ClientInitArgs {
            meta: None,
            settings: None,
        }
    }
}
pub struct ClientInitBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> ClientInitBuilder<'a, 'b> {
  #[inline]
  pub fn add_meta(&mut self, meta: flatbuffers::WIPOffset<ClientInfo<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<ClientInfo>>(ClientInit::VT_META, meta);
  }
  #[inline]
  pub fn add_settings(&mut self, settings: flatbuffers::WIPOffset<SessionSettings<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<SessionSettings>>(ClientInit::VT_SETTINGS, settings);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> ClientInitBuilder<'a, 'b> {
    let start = _fbb.start_table();
    ClientInitBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<ClientInit<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

pub enum ClientParcelOffset {}
#[derive(Copy, Clone, Debug, PartialEq)]

pub struct ClientParcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for ClientParcel<'a> {
    type Inner = ClientParcel<'a>;
    #[inline]
    fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self {
            _tab: flatbuffers::Table { buf: buf, loc: loc },
        }
    }
}

impl<'a> ClientParcel<'a> {
    #[inline]
    pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        ClientParcel {
            _tab: table,
        }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args ClientParcelArgs<'args>) -> flatbuffers::WIPOffset<ClientParcel<'bldr>> {
      let mut builder = ClientParcelBuilder::new(_fbb);
      if let Some(x) = args.rpc_packet { builder.add_rpc_packet(x); }
      if let Some(x) = args.init_packet { builder.add_init_packet(x); }
      builder.finish()
    }

    pub const VT_INIT_PACKET: flatbuffers::VOffsetT = 4;
    pub const VT_RPC_PACKET: flatbuffers::VOffsetT = 6;

  #[inline]
  pub fn init_packet(&self) -> Option<ClientInit<'a>> {
    self._tab.get::<flatbuffers::ForwardsUOffset<ClientInit<'a>>>(ClientParcel::VT_INIT_PACKET, None)
  }
  #[inline]
  pub fn rpc_packet(&self) -> Option<ClientProcedureCall<'a>> {
    self._tab.get::<flatbuffers::ForwardsUOffset<ClientProcedureCall<'a>>>(ClientParcel::VT_RPC_PACKET, None)
  }
}

pub struct ClientParcelArgs<'a> {
    pub init_packet: Option<flatbuffers::WIPOffset<ClientInit<'a >>>,
    pub rpc_packet: Option<flatbuffers::WIPOffset<ClientProcedureCall<'a >>>,
}
impl<'a> Default for ClientParcelArgs<'a> {
    #[inline]
    fn default() -> Self {
        ClientParcelArgs {
            init_packet: None,
            rpc_packet: None,
        }
    }
}
pub struct ClientParcelBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> ClientParcelBuilder<'a, 'b> {
  #[inline]
  pub fn add_init_packet(&mut self, init_packet: flatbuffers::WIPOffset<ClientInit<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<ClientInit>>(ClientParcel::VT_INIT_PACKET, init_packet);
  }
  #[inline]
  pub fn add_rpc_packet(&mut self, rpc_packet: flatbuffers::WIPOffset<ClientProcedureCall<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<ClientProcedureCall>>(ClientParcel::VT_RPC_PACKET, rpc_packet);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> ClientParcelBuilder<'a, 'b> {
    let start = _fbb.start_table();
    ClientParcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<ClientParcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

pub enum ServerInfoOffset {}
#[derive(Copy, Clone, Debug, PartialEq)]

pub struct ServerInfo<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for ServerInfo<'a> {
    type Inner = ServerInfo<'a>;
    #[inline]
    fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self {
            _tab: flatbuffers::Table { buf: buf, loc: loc },
        }
    }
}

impl<'a> ServerInfo<'a> {
    #[inline]
    pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        ServerInfo {
            _tab: table,
        }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args ServerInfoArgs) -> flatbuffers::WIPOffset<ServerInfo<'bldr>> {
      let mut builder = ServerInfoBuilder::new(_fbb);
      builder.add_version(args.version);
      builder.finish()
    }

    pub const VT_VERSION: flatbuffers::VOffsetT = 4;

  #[inline]
  pub fn version(&self) -> f32 {
    self._tab.get::<f32>(ServerInfo::VT_VERSION, Some(0.1)).unwrap()
  }
}

pub struct ServerInfoArgs {
    pub version: f32,
}
impl<'a> Default for ServerInfoArgs {
    #[inline]
    fn default() -> Self {
        ServerInfoArgs {
            version: 0.1,
        }
    }
}
pub struct ServerInfoBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> ServerInfoBuilder<'a, 'b> {
  #[inline]
  pub fn add_version(&mut self, version: f32) {
    self.fbb_.push_slot::<f32>(ServerInfo::VT_VERSION, version, 0.1);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> ServerInfoBuilder<'a, 'b> {
    let start = _fbb.start_table();
    ServerInfoBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<ServerInfo<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

pub enum ServerPracelOffset {}
#[derive(Copy, Clone, Debug, PartialEq)]

pub struct ServerPracel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for ServerPracel<'a> {
    type Inner = ServerPracel<'a>;
    #[inline]
    fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self {
            _tab: flatbuffers::Table { buf: buf, loc: loc },
        }
    }
}

impl<'a> ServerPracel<'a> {
    #[inline]
    pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        ServerPracel {
            _tab: table,
        }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args ServerPracelArgs<'args>) -> flatbuffers::WIPOffset<ServerPracel<'bldr>> {
      let mut builder = ServerPracelBuilder::new(_fbb);
      if let Some(x) = args.rpc_result_packet { builder.add_rpc_result_packet(x); }
      if let Some(x) = args.meta { builder.add_meta(x); }
      builder.add_error_packet(args.error_packet);
      builder.finish()
    }

    pub const VT_META: flatbuffers::VOffsetT = 4;
    pub const VT_ERROR_PACKET: flatbuffers::VOffsetT = 6;
    pub const VT_RPC_RESULT_PACKET: flatbuffers::VOffsetT = 8;

  #[inline]
  pub fn meta(&self) -> Option<ServerInfo<'a>> {
    self._tab.get::<flatbuffers::ForwardsUOffset<ServerInfo<'a>>>(ServerPracel::VT_META, None)
  }
  #[inline]
  pub fn error_packet(&self) -> ServerError {
    self._tab.get::<ServerError>(ServerPracel::VT_ERROR_PACKET, Some(ServerError::SESSION_INVALID)).unwrap()
  }
  #[inline]
  pub fn rpc_result_packet(&self) -> Option<&'a [u8]> {
    self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u8>>>(ServerPracel::VT_RPC_RESULT_PACKET, None).map(|v| v.safe_slice())
  }
}

pub struct ServerPracelArgs<'a> {
    pub meta: Option<flatbuffers::WIPOffset<ServerInfo<'a >>>,
    pub error_packet: ServerError,
    pub rpc_result_packet: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a ,  u8>>>,
}
impl<'a> Default for ServerPracelArgs<'a> {
    #[inline]
    fn default() -> Self {
        ServerPracelArgs {
            meta: None,
            error_packet: ServerError::SESSION_INVALID,
            rpc_result_packet: None,
        }
    }
}
pub struct ServerPracelBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> ServerPracelBuilder<'a, 'b> {
  #[inline]
  pub fn add_meta(&mut self, meta: flatbuffers::WIPOffset<ServerInfo<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<ServerInfo>>(ServerPracel::VT_META, meta);
  }
  #[inline]
  pub fn add_error_packet(&mut self, error_packet: ServerError) {
    self.fbb_.push_slot::<ServerError>(ServerPracel::VT_ERROR_PACKET, error_packet, ServerError::SESSION_INVALID);
  }
  #[inline]
  pub fn add_rpc_result_packet(&mut self, rpc_result_packet: flatbuffers::WIPOffset<flatbuffers::Vector<'b , u8>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ServerPracel::VT_RPC_RESULT_PACKET, rpc_result_packet);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> ServerPracelBuilder<'a, 'b> {
    let start = _fbb.start_table();
    ServerPracelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<ServerPracel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

}  // pub mod KenzisProto

